openapi: 3.0.0

info:
  title: "Streams API"
  description: "Manage Tapis Streams API."
  version: "1"
  termsOfService: "https://tapis-project.org"
  contact:
    name: "Streams API"
    url: "https://tapis-project.org"
    email: "cicsupport@tacc.utexas.edu"
  license:
    name: "BSD 3"
    url: "https://github.com/tapis-project/streams-api"

servers:
- url: http://localhost:5000
  description: Local Development
- url: https://dev.develop.tapis.io
  description: Develop Instance

paths:
  /sites:
    get:
      tags:
      - Sites
      summary: List sites.
      description: List sites.
      operationId: list_sites
      x-swagger-router-controller: connexContr
      parameters:
      - name: query
        in: query
        description: a formated query string for sites.
        schema:
          type: string
      - name: limit
        in: query
        description: limit the number of records returned.
        schema:
          type: integer
      - name: offset
        in: query
        description: index (offset) to start list.
        schema:
          type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BasicResponse'
                properties:
                  result:
                    type: array
                    items:
                       $ref: '#/components/schemas/Site'
        '400':
          description: Input error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'


    post:
      tags:
      - Sites
      summary: Create a site.
      description: Create a site.
      operationId: create_site
      x-swagger-router-controller: connexContr
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewSite'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BasicResponse'
                properties:
                  result:
                    type: array
                    items:
                      $ref: '#/components/schemas/Site'

        '400':
          description: Input error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'




  /sites/{site_uuid}:
    get:
      tags:
      - Sites
      summary: Get site details.
      description: Get site details.
      operationId: get_site
      x-swagger-router-controller: connexContr
      parameters:
        - name: site_uuid
          in: path
          description: Unique ID of site generated by Tapis
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BasicResponse'
                properties:
                  result:
                    $ref: '#/components/schemas/Site'
        '400':
          description: Input error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Site not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'



    put:
      tags:
      - Sites
      summary: Update a site
      description: Update a site
      operationId: update_site
      x-swagger-router-controller: connexContr
      parameters:
        - name: site_uuid
          in: path
          description: Unique ID of site generated by Tapis
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewSite'
      responses:
        '201':
          description: Updated
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BasicResponse'
                properties:
                 result:
                  $ref: '#/components/schemas/Site'

        '400':
          description: Input error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Site not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'


    delete:
      tags:
      - Sites
      summary: Delete a site
      description: Delete a site
      operationId: delete_site
      x-swagger-router-controller: connexContr
      parameters:
        - name: site_uuid
          in: path
          description: Unique ID of site generated by Tapis
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Site Deleted
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BasicResponse'
                properties:
                 result:
                  $ref: '#/components/schemas/Site'

        '400':
          description: Input error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Site not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'




  /instruments:
    get:
      tags:
      - Instruments
      summary: List instruments
      description: List instruments
      operationId: list_instruments
      parameters:
        - name: query
          in: query
          description: a formated query string for instruments.
          schema:
            type: string
        - name: limit
          in: query
          description: limit the number of records returned
          schema:
            type: integer
        - name: offset
          in: query
          description: index (offset) to start list
          schema:
            type: integer
      responses:
        '200':
          description: A list of instruments
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BasicResponse'
                properties:
                  result:
                    type: array
                    items:
                      $ref: '#/components/schemas/Instrument'


        '400':
          description: Input error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'




    post:
      tags:
        - Instruments
      summary: Create instruments (single or bulk)
      description: Create instruments (single or bulk)
      operationId: create_instrument
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewInstRequest'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BasicResponse'
                properties:
                  result:
                    type: array
                    items:
                      $ref: '#/components/schemas/Instrument'


        '400':
          description: Input error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /instruments/{instrument_uuid}:
    get:
      tags:
        - Instruments
      summary: Get instrument details
      description: Get instrument details
      operationId: get_instrument
      parameters:
        - name: instrument_uuid
          in: path
          description: Unique ID of instrument generated by Tapis
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BasicResponse'
                properties:
                  result:
                     $ref: "#/components/schemas/Instrument"

        '400':
          description: Input error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Site not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    put:
      tags:
        - Instruments
      summary: Update an instrument
      description: Update an instrument
      operationId: update_instrument
      #x-swagger-router-controller: connexContr
      parameters:
        - name: instrument_uuid
          in: path
          description: Unique ID of instrument generated by Tapis
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateInstRequest'
      responses:
        '201':
          description: Updated
          content:
           application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BasicResponse'
                properties:
                   result:
                    type: array
                    items:
                      $ref: '#/components/schemas/Instrument'

        '400':
          description: Input error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Instrument not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    delete:
      tags:
      - Instruments
      summary: Delete an instrument
      description: Delete an instrument
      operationId: delete_instrument
      #x-swagger-router-controller: connexContr
      parameters:
        - name: instrument_uuid
          in: path
          description: Unique ID of instrument generated by Tapis
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BasicResponse'
                properties:
                  result:
                    $ref: '#/components/schemas/Instrument'
        '400':
          description: Input error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Instrument not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /variables:
    get:
      tags:
       - Variables
      summary: List variables.
      description: List variables.
      operationId: list_variables
      x-swagger-router-controller: connexContr
      parameters:
      - name: query
        in: query
        description: a formated query string for variables.
        schema:
          type: string
      - name: limit
        in: query
        description: limit the number of records returned.
        schema:
          type: integer
      - name: offset
        in: query
        description: index (offset) to start list.
        schema:
          type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BasicResponse'
                properties:
                   result:
                    type: array
                    items:
                      $ref: '#/components/schemas/Variable'
        '400':
          description: Input error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    post:
      tags:
      - Variables
      summary: Create variable (single or bulk).
      description: Create variable (single or bulk).
      operationId: create_variable
      x-swagger-router-controller: connexContr
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewVarRequest'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BasicResponse'
                properties:
                   result:
                    type: array
                    items:
                      $ref: '#/components/schemas/Variable'

        '400':
           description: Input error.
           content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

        '401':
           description: Not authorized.
           content:
             application/json:
               schema:
                 $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /variables/{variable_uuid}:
    get:
      tags:
      - Variables
      summary: Get variable details
      description: Get details of a specific variable by its id
      operationId: get_variable
      parameters:
      - name: variable_uuid
        in: path
        description: Unique ID of variable generated by Tapis
        required: true
        schema:
          type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BasicResponse'
                properties:
                  result:
                    $ref: '#/components/schemas/Variable'

        '400':
          description: Input error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Variable not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    put:
      tags:
      - Variables
      summary: Update a variable
      description: Update a variable
      operationId: update_variable
      x-swagger-router-controller: connexContr
      parameters:
        - name: variable_uuid
          in: path
          description: Unique ID of variable generated by Tapis
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewVariable'
      responses:
        '201':
          description: Updated
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BasicResponse'
                properties:
                 result:
                  $ref: '#/components/schemas/Variable'

        '400':
          description: Input error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Variable not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    delete:
      tags:
      - Variables
      summary: Delete a variable (single or bulk)
      description: Delete a variable (single or bulk)
      operationId: delete_variable
      x-swagger-router-controller: connexContr
      parameters:
        - name: variable_uuid
          in: path
          description: Unique ID of variable generated by Tapis
          required: true
          schema:
            type: string
      responses:
        '201':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BasicResponse'
                properties:
                 result:
                  $ref: '#/components/schemas/Variable'

        '400':
          description: Input error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Variable not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /measurements:
    get:
      tags:
        - Measurements
      summary: List measurments.
      description: List measurements.
      operationId: list_measurements
      x-swagger-router-controller: connexContr
      parameters:
        - name: query
          in: query
          description: a formated query string for measurements.
          schema:
            type: string
        - name: limit
          in: query
          description: limit the number of records returned.
          schema:
            type: integer
        - name: offset
          in: query
          description: index (offset) to start list.
          schema:
            type: integer
        - name: start_date
          in: query
          description: start date of measurements
          schema:
            type: string
        - name: end_date
          in: query
          description: end date of measurements
          schema:
            type: string
        - name: geojson
          in: query
          description: geojson polygon to spatiall search
          schema:
            type: object
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BasicResponse'
                properties:
                   result:
                    type: array
                    items:
                      $ref: '#/components/schemas/Measurement'

        '400':
          description: Input error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    post:
      tags:
      - Measurements
      summary: Create a measurement.
      description: Create a measurement.
      operationId: create_measurement
      x-swagger-router-controller: connexContr
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewMeasurement'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BasicResponse'
                properties:
                 result:
                    type: array
                    items:
                      $ref: '#/components/schemas/Measurement'

        '400':
          description: Input error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /creeks:
    get:
      tags:
       - Creeks
      summary: List creeks.
      description: List creeks.
      operationId: list_creeks
      x-swagger-router-controller: connexContr
      parameters:
      - name: query
        in: query
        description: a formated query string for creeks.
        schema:
          type: string
      - name: limit
        in: query
        description: limit the number of records returned.
        schema:
          type: integer
      - name: offset
        in: query
        description: index (offset) to start list.
        schema:
          type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BasicResponse'
                properties:
                   result:
                    type: array
                    items:
                      $ref: '#/components/schemas/Creek'

        '400':
          description: Input error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'


    post:
      tags:
      - Creeks
      summary: Create creeks.
      description: Create creeks.
      operationId: create_creek
      x-swagger-router-controller: connexContr
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewCreek'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BasicResponse'
                properties:
                  result:
                    type: array
                    items:
                      $ref: '#/components/schemas/Creek'
        '400':
          description: Input error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'


  /creeks/{creek_uuid}:
    get:
      tags:
      - Creeks
      summary: Get creek details
      description: Get details of a specific creek by its id
      operationId: get_creek
      parameters:
      - name: creek_uuid
        in: path
        description: Unique ID of creek generated by Tapis
        required: true
        schema:
          type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BasicResponse'
                properties:
                  result:
                    $ref: '#/components/schemas/Creek'


        '400':
          description: Input error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Creek not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'



    put:
      tags:
      - Creeks
      summary: Update a creek
      description: Update a creek
      operationId: update_creek
      x-swagger-router-controller: connexContr
      parameters:
        - name: creek_uuid
          in: path
          description: Unique ID of creek generated by Tapis
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewCreek'
      responses:
        '201':
          description: Updated
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BasicResponse'
                properties:
                 result:
                  $ref: '#/components/schemas/Creek'

        '400':
          description: Input error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Creek not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'


    delete:
      tags:
      - Creeks
      summary: Delete a creek
      description: Delete a creek
      operationId: delete_creek
      x-swagger-router-controller: connexContr
      parameters:
        - name: creek_uuid
          in: path
          description: Unique ID of creek generated by Tapis
          required: true
          schema:
            type: string
      responses:
        '201':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BasicResponse'
                properties:
                 result:
                  $ref: '#/components/schemas/Creek'

        '400':
          description: Input error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Creek not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'


  /units:
    get:
      tags:
       - Units
      summary: List units.
      description: List units.
      operationId: list_units
      x-swagger-router-controller: connexContr
      parameters:
      - name: query
        in: query
        description: a formated query string for units.
        schema:
          type: string
      - name: limit
        in: query
        description: limit the number of records returned.
        schema:
          type: integer
      - name: offset
        in: query
        description: index (offset) to start list.
        schema:
          type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BasicResponse'
                properties:
                   result:
                    type: array
                    items:
                      $ref: '#/components/schemas/Unit'
        '400':
          description: Input error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Creek not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /measured_properties:
    get:
      tags:
       - Measured_Properties
      summary: List measured_properties.
      description: List measured_properties.
      operationId: list_measured_properties
      x-swagger-router-controller: connexContr
      parameters:
      - name: query
        in: query
        description: a formated query string for units.
        schema:
          type: string
      - name: limit
        in: query
        description: limit the number of records returned.
        schema:
          type: integer
      - name: offset
        in: query
        description: index (offset) to start list.
        schema:
          type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BasicResponse'
                properties:
                   result:
                    type: array
                    items:
                      $ref: '#/components/schemas/MeasuredProperty'
        '400':
          description: Input error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Creek not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

components:
  schemas:
    BasicResponse:
      type: object
      properties:
        version:
          type: string
          description: Version of the API
        message:
          type: string
          description: Brief description of the response
        status:
          type: string
          description: Whether the request was a success or failure.
          enum: [success]

    ErrorResponse:
      type: object
      properties:
        version:
          type: string
          description: Version of the API
        message:
          type: string
          description: Brief description of the response
        status:
          type: string
          description: Whether the request was a success or failure.
          enum: [failure]

    BasicResult:
      type: object
      properties:
        resource_name:
          type: string
          description: Name of the resource.
        resource_id:
          type: string
          description: Id of the resource.
        resource_owner:
          type: string
          description: Owner of the resource
        resource_type:
          type: string
          description: Type of the resource

    Site:
      type: object
      properties:
        name:
          type: string
          description: Site name
        site_id:
          type: string
          description: The unique identifier for site
        site_uuid:
          type: string
          description: The site uuid generated by Tapis
        owner:
          type: string
          description: The owner for site
        resource_type:
          type: string
          description: The type of resource.
          enum: [site]
        longitude:
              type: number
              description: longitude
        latitude:
              type: number
              description: latitude
        elevation:
              type: number
              description: elevation

    Variable:
      type: object
      properties:
        name:
          type: string
          description: The name of variable.
        variable_id:
          type: string
          description: The unique identifier for variable.
        owner:
          type: string
          description: The owner for variable.
        instrument_uuid:
          type: string
          description: The instrument uuid generated by Tapis.
        shortname:
          type: string
          description: The shortname of variable.
        unit:
          type: string
          description: The unit to measure property of variable.
        unit_abbrev:
          type: string
          description: The unit abbrevation to measure variable.
        measured_property:
          type: string
          description: The property measured by variable.
        resource_type:
          type: string
          description: The type of resource.
          enum: [variable]

    Measurement:
      type: object
      properties:
        datetime:
          type: string
          description: The datetimestamp of the measurement.
        instrument_id:
          type: integer
          description: The  identifier for an instrument.
      additionalProperties:
        type: string

    Creek:
      type: object
      properties:
        name:
          type: string
          description: The name of creek.
        creek_uuid:
          type: string
          description: The creek uuid generated by Tapis.
        creek_id:
          type: string
          description: The unique identifier for creek.
        owner:
          type: string
          description: The owner for creek.
        query:
          type: object
          description: For continous query it needs frequency, group by time.RESAMPLE EVERY <interval> FOR <interval>
        triggers:
          type: array
          items:
            type: object
          description: Each object in triggers array evaluates one variable using some mathematical function.
        query_type:
          type: string
          description: Type of query
          enum: [triggers, continous]
        resource_type:
          type: string
          description: The type of resource.
          enum: [creek]
        action:
          oneOf:
            - $ref: "#/components/schemas/Actor"
            - $ref: "#/components/schemas/Notification"
            - $ref: "#/components/schemas/Application"
            - $ref: "#/components/schemas/Callback"


    Unit:
      type: object
      properties:
        name:
          type: string
          description: The name of unit.
        abbrevation:
          type: string
          description: The abbrevation for the unit
        ontology:
          type: string
          description: Name of the ontology this unit belongs too.
        category:
          type: string
          description: category of unit.

    MeasuredProperty:
      type: object
      properties:
        label:
          type: string
          description: The label of property.
        url:
          type: string
          description: The url for the properties ontology
        ontology:
          type: string
          description: Name of the ontology this unit belongs too.

    NewSite:
      type: object
      properties:
        site_id:
          type: string
          pattern: "^[a-zA-Z0-9-]*$"
          description: The unique identifier for the tenant.
        resource_type:
          type: string
          enum: [site]
          description: Type of resource(site) to be generated.
        site_name:
          type: string
          description: Resource name.
        lat:
          type: number
          description: Latitude of site.
        lon:
          type: number
          description: Longitude of site.
        elevation:
          type: number
          description: Elevation of site.
      required: [resource_type, site_name, lat, lon, elevation]

    UpdateSite:
      type: object
      properties:
        site_uuid:
          type: string
          pattern: "^[a-zA-Z0-9-]*$"
          description: The unique identifier generated by Tapis.
        site_id:
          type: string
          pattern: "^[a-zA-Z0-9-]*$"
          description: The unique identifier for the tenant.
        resource_type:
          type: string
          enum: [site]
          description: Type of resource(site) to be generated.
        site_name:
          type: string
          description: Resource name.
        lat:
          type: number
          description: Latitude of site.
        lon:
          type: number
          description: Longitude of site.
        elevation:
          type: number
          description: Elevation of site.
      required: [site-uuid, site-id, resource_type, site_name, lat, lon, elevation]

    NewInstRequest:
      type: array
      items:
        $ref: '#/components/schemas/NewInst'

    NewInst:
      type: object
      properties:
        resource_type:
          type: string
          description: type of resource
          enum: [instrument]
        instrument_name:
          type: string
          description: Instrument name
        site_id:
          type: string
          pattern: "^[a-zA-Z0-9-]*$"
          description: Site Id to which instrument is attached
        description:
          type: string
          description: More information on instrument
        tags:
          type: array
          description: tags array
          items:
            type: string
        metadata:
          type: string
          description: user metadata on instruments
      required: [resource_type, site_id, instrument_name, description]

    UpdateInstRequest:
      type: array
      items:
        $ref: '#/components/schemas/UpdateInst'

    UpdateInst:
      type: object
      properties:
        resource_type:
          type: string
          description: type of resource
          enum: [instrument]
        instrument_uuid:
          type: string
          description: Instrument unique ID generated by Tapis
        instrument_name:
          type: string
          description: Instrument name
        site_id:
          type: string
          pattern: "^[a-zA-Z0-9-]*$"
          description: Site Id to which instrument is attached
        description:
          type: string
          description: More information on instrument
        tags:
          type: array
          description: tags array
          items:
            type: string
        metadata:
          type: string
          description: user metadata on instruments
      required: [resource_type, instrument_uuid, site_id, instrument_name, description]

    Instrument:
      type: object
      properties:
        name:
          type: string
          description: Instrument name
        resource_type:
          type: string
          description: The type of resource.
          enum: [instrument]
        instrument_uuid:
          type: string
          pattern: "^[a-zA-Z0-9-]*$"
          description: The unique identifier generated by Tapis.
        instrument_id:
          type: string
          description: The unique identifier for instrument for a tenant
        owner:
          type: string
          description: Owner of the instrument
        site_id:
          type: string
          description: The site id to which instrument attached to
        created:
          type: string
          description: creation date of the instrument
        tags:
          type: array
          items:
            type: string
          description: arrays of tags on the instruments
        metadata:
          type: string
          description: User entered metadata for the instruments

    NewVarRequest:
      type: array
      items:
        $ref: '#/components/schemas/NewVariable'

    NewVariable:
      type: object
      properties:
        var_name:
          type: string
          description: Variable name.
        shortname:
          type: string
          description: Shortname of variable.
        unit_id:
          type: number
          description: The Id of the unit to measure property of variable
        unit_abbrev:
          type: string
          description: The unit abbrevation to measure the property of variable.
        measured_property_id:
          type: number
          description: Id of the Property measured by the variable type
        format:
          type: string
          description: text for single variable creation and file for bulk variable creation
          enum: [text, file]
        storage_system:
          type: string
          description: Storage system name for file format
      required: [resource_type, var_name, unit, unit_abbrev, format]

    NewMeasurement:
      type: object
      properties:
        instrument_id:
          type: string
          description: Associate instrument id.
        datetime:
          type: string
          description: The Datatime of the measurement
        vars:
          type: object
          description: The Variable IDs and measurements corresponding to the datetime {varid1:measurement_value1,varid2:measurement_value2}
      required: [datetime, instument_id, vars]

    NewCreek:
      type: object
      properties:
        variable_uuid:
          type: string
          description: Associate variable id.
        query:
          type: object
          description: For continous query it needs frequency, group by time.RESAMPLE EVERY <interval> FOR <interval>
        triggers:
          type: array
          items:
            type: object
          description: Each object in triggers array evaluates one variable using some mathematical function.
        query_type:
          type: string
          description: Type of query
          enum: [triggers, continous]
        action:
          type: string
          description: Type of action
          enum: [actor, callback, application, notifications]


    Actor:
     type: object

    Notification:
     type: object

    Callback:
     type: object

    Application:
     type: object
